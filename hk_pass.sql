CREATE TABLE hk_passes (
    pass_num NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    pass_name VARCHAR2(50) NOT NULL,
    price NUMBER NOT NULL,
    duration_days NUMBER NOT NULL,
    description VARCHAR2(200),
    is_active CHAR(1) DEFAULT 'Y'
);

SELECT * FROM hk_passes;

CREATE TABLE hk_user_passes (
    user_pass_num NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_num NUMBER NOT NULL,
    pass_num NUMBER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status VARCHAR2(20) DEFAULT 'ACTIVE',
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_id VARCHAR2(100),
    FOREIGN KEY (user_num) REFERENCES hk_users(user_num),
    FOREIGN KEY (pass_num) REFERENCES hk_passes(pass_num)
);

CREATE TABLE hk_refunds (
    refund_num NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_pass_num NUMBER NOT NULL,
    refund_amount NUMBER NOT NULL,
    reason VARCHAR2(200),
    status VARCHAR2(20) DEFAULT 'REQUESTED',
    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_pass_num) REFERENCES hk_user_passes(user_pass_num)
);


-- 결제 테이블 생성
CREATE TABLE hk_payments (
    payment_num NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_num NUMBER NOT NULL,
    payment_id VARCHAR2(100),           -- 포트원 결제 ID
    merchant_uid VARCHAR2(100) NOT NULL, -- 가맹점 주문번호 (UNIQUE)
    amount NUMBER NOT NULL,
    status VARCHAR2(20) DEFAULT 'READY', -- READY, PAID, CANCELLED, FAILED
    pay_method VARCHAR2(20),            -- card, trans, vbank 등
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    paid_at TIMESTAMP,
    card_name VARCHAR2(50),             -- 카드사명
    bank_name VARCHAR2(50),             -- 은행명
    buyer_name VARCHAR2(50),
    buyer_email VARCHAR2(100),
    buyer_tel VARCHAR2(20),
    FOREIGN KEY (user_num) REFERENCES hk_users(user_num)
);

-- 인덱스 생성 (검색 성능 향상)
CREATE INDEX idx_payments_user_num ON hk_payments(user_num);
CREATE INDEX idx_payments_merchant_uid ON hk_payments(merchant_uid);
CREATE INDEX idx_payments_payment_id ON hk_payments(payment_id);

-- 테스트용 패스권 데이터 추가 (없다면)
INSERT INTO hk_passes (pass_name, price, duration_days, description) VALUES
('1개월 이용권', 120000, 30, '30일간 전국 모든 가맹점 자유 이용');

INSERT INTO hk_passes (pass_name, price, duration_days, description) VALUES
('3개월 이용권', 240000, 90, '90일간 전국 모든 가맹점 자유 이용 + 7일 환불보장');

INSERT INTO hk_passes (pass_name, price, duration_days, description) VALUES
('6개월 이용권', 360000, 180, '180일간 전국 모든 가맹점 자유 이용 + 7일 환불보장');

INSERT INTO hk_passes (pass_name, price, duration_days, description) VALUES
('12개월 이용권', 540000, 360, '360일간 전국 모든 가맹점 자유 이용 + 7일 환불보장');

-- 테이블 확인
SELECT * FROM hk_passes;
SELECT * FROM hk_payments;

SELECT COUNT(*) FROM hk_passes;
SELECT * FROM hk_passes;

-- 1. 현재 결제 테이블 상태 확인
SELECT payment_num, user_num, merchant_uid, payment_id, status, amount 
FROM hk_payments 
ORDER BY payment_num DESC;

-- 2. payment_id가 NULL인 레코드 확인
SELECT COUNT(*) as null_payment_id_count
FROM hk_payments 
WHERE payment_id IS NULL;

-- 3. 테스트용 payment_id 수동 업데이트
UPDATE hk_payments 
SET payment_id = 'test_' || merchant_uid,
    status = 'PAID'
WHERE payment_id IS NULL;

-- 1. 특정 merchant_uid로 업데이트 테스트
UPDATE hk_payments 
SET payment_id = 'MANUAL_TEST_123', 
    status = 'MANUAL_PAID' 
WHERE merchant_uid = 'HK_1757863802735_4';

-- 2. 영향받은 행 수 확인 (Oracle에서는 SQL Developer 하단에 표시)

-- 3. 결과 확인
SELECT payment_num, merchant_uid, payment_id, status 
FROM hk_payments 
WHERE merchant_uid = 'HK_1757863802735_4';